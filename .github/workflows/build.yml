name: Build and Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id:   cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt

      - name: Run Tests and Generate Code Coverage
        run: pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          version: "v0.1.15"
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: ./coverage1.xml,./coverage2.xml,!./cache
          flags: unittests
          name: codecov-umbrella
          verbose: true

      - name: Run Super-Linter
        uses: super-linter/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          DEFAULT_BRANCH: main


  build:
    needs: test
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id:   cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt

      - name: Build application
        run: pyinstaller --onefile main.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: application
          path: dist/main.exe

  artifacts:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Restore dependencies cache
        uses: actions/cache@v2
        id:   cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: application
          path: dist/main.exe
